
/** This monitor is responsible for Prosscing of events and pushing them to Promethus  */
package com.apamax.Delivery;
using com.apama.correlator.Component;
//Getting the reqired package to subscibe to the deilivery events as well as using the liabry that allows for Promethus intergration
monitor DeliveryMonitor {
	Component component;
	integer MissedDel := 0;
	integer TotalDel := 0;
	integer HitDel := TotalDel - MissedDel;
	integer Drive1 := 0;
	integer Drive2 := 0;
	integer Drive3 := 0;
	integer Drive4 := 0;
	sequence<Driver> drivers := [Driver("Phil", 0), Driver("John", 0), Driver("Mark", 0), Driver("Bob", 0)];
	sequence<routes> Routes := [routes(0,0),routes(1,0),routes(2,0),routes(3,0),routes(4,0),routes(5,0),routes(6,0),routes(7,0),routes(8,0),routes(9,0)];
	//Insialtion of every variable and sequence that is going to be used to be used.
	action onload() {
		
		monitor.subscribe("Deliveries");
		//Subscribing to the channel that the events are going to come on  
		integer i := 0;
		// Counter Issilation 
		    while( i < 10 ) {
		    	component.setUserStatus("Route_" + (i+1).toString() + "_Lates", Routes[i].rounteLates.toString());
		    	i := i + 1;
		    }
		component.setUserStatus("Num_Missed_Delivery",MissedDel.toString());
		component.setUserStatus("Num_Total_Delivery", TotalDel.toString());
		component.setUserStatus("Num_Hit_Delivery", TotalDel.toString());
		while(i < 4 ) {
	    	component.setUserStatus("Driver_" + (i+1).toString() + "_Miss", drivers[i].Lates.toString());
	    	i := i + 1;
	    }
	 //Pushing the Metrics to prometheus to be scraped on lanch 
		on all Delivery() as d {
			TotalDel := TotalDel + 1;
		    if( d.expectedTime < d.actualTime - 1.0) {
		    	MissedDel := MissedDel + 1;
		    	integer id := integer.rand(4);
			    drivers[id].Lates := drivers[integer.rand(4)].Lates + 1;
			    integer idR := integer.rand(10);
			    Routes[idR].rounteLates := Routes[idR].rounteLates + 1;
		    } else {
		    	HitDel := HitDel + 1;
		    }
		    //Prossceing of the events by increaing varaibles and sequences depending on wheather the deleiverys are late or not.
		   
		    
		    
		   
		     i := 0;
		    
		    while( i < 10 ) {
		    	component.setUserStatus("Route_" + (i+1).toString() + "_Lates", Routes[i].rounteLates.toString());
		    	i := i + 1;
		    }
		    i := 0;
		    while(i < 4 ) {
		    	component.setUserStatus("Driver_" + (i+1).toString() + "_Miss", drivers[i].Lates.toString());
		    	i := i + 1;
		    }
		    	
		    
		    component.setUserStatus("Num_Missed_Delivery",MissedDel.toString());
		    component.setUserStatus("Num_Hit_Delivery",HitDel.toString());
			component.setUserStatus("Num_Total_Delivery", TotalDel.toString());
		    //Pushing updated metrics to prometheus
		  }
	
	}
}